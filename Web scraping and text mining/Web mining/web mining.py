# -*- coding: utf-8 -*-
"""Web_mining_TP_noté_ONANA_JOEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kK3UUM6-LfEQrP-24ttY0FeZvRVdQnt

##TP noté web mining- ONANA
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
from textblob import TextBlob

url = "https://www.webscraper.io/test-sites/e-commerce/static/computers/laptops"

response = requests.get(url)

if response.status_code == 200:
    soup = BeautifulSoup(response.content, 'html.parser')

    print(soup.prettify())



products = soup.find_all('div', class_='product-wrapper card-body')
print(products)

soup =  BeautifulSoup(response.content, 'html.parser')

title = soup.find_all('a', class_='title')
title_list=[]
for t in title:
  title_list.append(t.text)
#print(title_list)

description_list = []
description = soup.find_all('p', class_='description card-text')
for desc in description:
  description_list.append(desc.text)
#print(description_list)


price = soup.find_all('h4', class_='price float-end card-title pull-right')
price_list = []
for pr in price:
  price_list.append(pr.text)
#print(price_list)


# Find all <p> tags with the 'data-rating' attribute
rating_tags = soup.find_all('p', attrs={'data-rating': True})

rating_list = []
for rating_tag in rating_tags:
  star_count2 = len(rating_tag.find_all('span', class_='ws-icon ws-icon-star'))
  rating_list.append(star_count2)
#print(rating_list)

# Create the DataFrame
df = pd.DataFrame({
    'nom': title_list,
    'description': description_list,
    'prix': price_list,
    'rating': rating_list
})

# Display the DataFrame
df

import pandas as pd


df['prix'] = pd.to_numeric(df['prix'], errors='coerce')
df['rating'] = pd.to_numeric(df['rating'], errors='coerce')

# 1) Highest 3 ratings
print("Top 3 highest rated products:")
top_rated = df.nlargest(3, 'rating')
for index, row in top_rated.iterrows():
    print(f"{row['nom']} (Rating: {row['rating']})")

print("\n")

# 2) Lowest 3 ratings
print("3 lowest rated products:")
lowest_rated = df.nsmallest(3, 'rating')
for index, row in lowest_rated.iterrows():
    print(f"{row['nom']} (Rating: {row['rating']})")

print("\n")

# 3) Highest 3 prices
print("Top 3 most expensive products:")
most_expensive = df.nlargest(3, 'prix')
for index, row in most_expensive.iterrows():
    print(f"{row['nom']} (Price: {row['prix']})")

print("\n")

# 4) Lowest 3 prices
print("3 least expensive products:")
least_expensive = df.nsmallest(3, 'prix')
for index, row in least_expensive.iterrows():
    print(f"{row['nom']} (Price: {row['prix']})")